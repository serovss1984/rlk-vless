require('dotenv').config();
const db = require('./config/db'); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const moment = require('moment'); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
const axios = require('axios'); // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Telegram
const cron = require('node-cron');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ Telegram
const TELEGRAM_BOT_API = process.env.TELEGRAM_BOT_API;
const TELEGRAM_NOTIFICATION_TIME = process.env.TELEGRAM_NOTIFICATION_TIME || '12:00';

let adminChatIds = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const loadAdminChatIds = () => {
  db.query('SELECT chatId FROM users WHERE admin = 1', (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', err);
      return;
    }

    adminChatIds = results.map(row => row.chatId.toString());
    console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${adminChatIds.join(', ')}`);
  });
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadAdminChatIds();

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
const sendTelegramNotification = async (chatId, message) => {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_API}/sendMessage`;

  try {
    await axios.post(url, {
      chat_id: chatId,
      text: message,
    });
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${chatId}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${chatId}:`, error.response?.data || error.message);
  }
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
const sendAdminNotifications = async (message) => {
  if (adminChatIds.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    return;
  }

  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: ${adminChatIds.join(', ')}`);
  
  const adminPromises = adminChatIds.map(async (adminId) => {
    try {
      await sendTelegramNotification(adminId, message);
      console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminId} —É–≤–µ–¥–æ–º–ª–µ–Ω`);
    } catch (error) {
      console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${adminId}`);
    }
  });

  await Promise.allSettled(adminPromises);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –∞–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–π –ø–ª–∞—Ç—ã
const chargeUsersHourly = async () => {
  const currentDate = moment().format('YYYY-MM-DD HH:mm:ss');
  
  db.query('SELECT * FROM users WHERE locked = 0', async (err, users) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.');
      return;
    }

    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    for (const user of users) {
      if (!user) {
        console.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
        continue;
      }

      try {
        await new Promise((resolve, reject) => {
          db.query('SELECT * FROM plans WHERE id = ?', [user.plan_id], async (err, plan) => {
            if (err) {
              console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', err);
              reject(err);
              return;
            }

            if (!plan || plan.length === 0) {
              console.error(`‚ùå –¢–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
              resolve();
              return;
            }

            const hourlyRate = calculateHourlyRate(plan[0].price, user);
            const balance = parseFloat(user.balance);

            if (balance >= hourlyRate) {
              const newBalance = balance - hourlyRate;

              db.query('UPDATE users SET balance = ?, lastBillDate = ? WHERE chatId = ?', 
                [newBalance, currentDate, user.chatId], 
                async (err) => {
                  if (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${user.chatId}:`, err);
                    reject(err);
                    return;
                  }
                  console.log(`‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ ${user.chatId}, —Å—É–º–º–∞: ${hourlyRate.toFixed(4)}, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)}`);
                  resolve();
                });
            } else {
              // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              db.query('UPDATE users SET locked = 1, lockedDate = ? WHERE chatId = ?', 
                [currentDate, user.chatId], 
                async (err) => {
                  if (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ${user.chatId}:`, err);
                    reject(err);
                    return;
                  }

                  // –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
                  try {
                    await axios.put(`http://localhost:3332/client/${user.chatId}-1/disable`);
                    console.log(`üîí –û—Ç–∫–ª—é—á—ë–Ω –∫–ª–∏–µ–Ω—Ç ${user.chatId}-1`);
                  } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${user.chatId}-1:`, error.message);
                  }

                  try {
                    await axios.put(`http://localhost:3332/client/${user.chatId}-5/disable`);
                    console.log(`üîí –û—Ç–∫–ª—é—á—ë–Ω –∫–ª–∏–µ–Ω—Ç ${user.chatId}-5`);
                  } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${user.chatId}-5:`, error.message);
                  }

                  console.log(`üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ${user.chatId}`);
                  
                  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  await sendTelegramNotification(
                    user.chatId, 
                    '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.'
                  );
                  
                  await sendAdminNotifications(
                    `üîí –ê–∫–∫–∞—É–Ω—Ç ${user.chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ë–∞–ª–∞–Ω—Å: ${balance.toFixed(2)}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${hourlyRate.toFixed(4)}`
                  );
                  
                  resolve();
                });
            }
          });
        });
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chatId}:`, error);
      }
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
const calculateHourlyRate = (planPrice, user) => {
  // –ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
  const baseHourlyRate = parseFloat(planPrice) / (30 * 24);

  if (!user) {
    console.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
    return 0;
  }

  // –ú–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π vless
  const vlessFields = ['NL', 'GE'];
  let filledFieldsCount = 0;

  vlessFields.forEach(field => {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–µ "0"
    if (user[field] !== "0") {
      filledFieldsCount++;
    }
  });

  // –ò—Ç–æ–≥–æ–≤–∞—è –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const hourlyRate = baseHourlyRate * filledFieldsCount;
  console.log(`üí∞ –†–∞—Å—á–µ—Ç –¥–ª—è ${user.chatId}: –±–∞–∑–∞=${baseHourlyRate.toFixed(4)}, –º–Ω–æ–∂–∏—Ç–µ–ª—å=${filledFieldsCount}, –∏—Ç–æ–≥–æ=${hourlyRate.toFixed(4)}`);
  
  return hourlyRate;
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const UnlockUsers = async () => {
  const currentDate = moment().format('YYYY-MM-DD HH:mm:ss');
  
  db.query('SELECT * FROM users WHERE locked = 1', async (err, users) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.');
      return;
    }

    console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    for (const user of users) {
      if (!user) {
        console.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
        continue;
      }

      try {
        await new Promise((resolve, reject) => {
          db.query('SELECT * FROM plans WHERE id = ?', [user.plan_id], async (err, plan) => {
            if (err) {
              console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞:', err);
              reject(err);
              return;
            }

            if (!plan || plan.length === 0) {
              console.error(`‚ùå –¢–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
              resolve();
              return;
            }

            const hourlyRate = calculateHourlyRate(plan[0].price, user);
            const balance = parseFloat(user.balance);

            if (balance >= hourlyRate) {
              db.query('UPDATE users SET locked = 0 WHERE chatId = ?', [user.chatId], async (err) => {
                if (err) {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ${user.chatId}:`, err);
                  reject(err);
                  return;
                }

                // –í–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
                try {
                  await axios.put(`http://localhost:3332/client/${user.chatId}-1/enable`);
                  console.log(`üîì –í–∫–ª—é—á—ë–Ω –∫–ª–∏–µ–Ω—Ç ${user.chatId}-1`);
                } catch (error) {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${user.chatId}-1:`, error.message);
                }

                try {
                  await axios.put(`http://localhost:3332/client/${user.chatId}-5/enable`);
                  console.log(`üîì –í–∫–ª—é—á—ë–Ω –∫–ª–∏–µ–Ω—Ç ${user.chatId}-5`);
                } catch (error) {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${user.chatId}-5:`, error.message);
                }

                console.log(`üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ${user.chatId}`);
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await sendTelegramNotification(
                  user.chatId, 
                  '‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω.'
                );
                
                await sendAdminNotifications(
                  `üîì –ê–∫–∫–∞—É–Ω—Ç ${user.chatId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ë–∞–ª–∞–Ω—Å: ${balance.toFixed(2)}`
                );
                
                resolve();
              });
            } else {
              console.log(`‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ${user.chatId}: ${balance.toFixed(2)} < ${hourlyRate.toFixed(4)}`);
              resolve();
            }
          });
        });
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.chatId}:`, error);
      }
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const sendDailyNotifications = async () => {
  db.query('SELECT * FROM users WHERE locked = 1', async (err, users) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', err);
      return;
    }
    
    if (users.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      return;
    }

    console.log(`üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    for (const user of users) {
      await sendTelegramNotification(
        user.chatId, 
        'üí° –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.'
      );
    }
    
    await sendAdminNotifications(
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${users.length} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
    );
  });
};

// –ó–∞–¥–∞—á–∏ cron: —Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
cron.schedule('0 * * * *', chargeUsersHourly);
cron.schedule('*/5 * * * *', UnlockUsers);
cron.schedule(`0 ${TELEGRAM_NOTIFICATION_TIME.split(':')[1]} ${TELEGRAM_NOTIFICATION_TIME.split(':')[0]} * * *`, sendDailyNotifications);

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule('*/5 * * * *', loadAdminChatIds);

console.log('üöÄ –ë–∏–ª–ª–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞');
console.log('‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:');
console.log('   - –°–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å (0 * * * *)');
console.log('   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç');
console.log('   - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤', TELEGRAM_NOTIFICATION_TIME);

module.exports = { 
  chargeUsersHourly, 
  sendTelegramNotification, 
  UnlockUsers, 
  sendAdminNotifications,
  loadAdminChatIds
};

//chargeUsersHourly();