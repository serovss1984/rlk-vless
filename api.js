process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

require('dotenv').config();
const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid'); // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

const app = express();
const PORT = 3332;

// --- –ß–∏—Ç–∞–µ–º –∏–∑ env —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥–æ–≤ ---
const SERVER_CONFIGS = {
  NL: {
    PANEL_URL: process.env.PANEL_URL_NL,
    LOGIN_USERNAME: process.env.LOGIN_USERNAME_NL,
    LOGIN_PASSWORD: process.env.LOGIN_PASSWORD_NL,
    INBOUND_ID: parseInt(process.env.INBOUND_ID_NL, 10)
  },
  DE: {
    PANEL_URL: process.env.PANEL_URL_DE,
    LOGIN_USERNAME: process.env.LOGIN_USERNAME_DE,
    LOGIN_PASSWORD: process.env.LOGIN_PASSWORD_DE,
    INBOUND_ID: parseInt(process.env.INBOUND_ID_DE, 10)
  }
};

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ —Å—É—Ñ—Ñ–∏–∫—Å—É email ---
function getServerConfigBySuffix(email) {
  if (email.endsWith('-1')) return SERVER_CONFIGS.NL;
  if (email.endsWith('-5')) return SERVER_CONFIGS.DE;
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
  return SERVER_CONFIGS.NL; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é NL
}


const SERVER_STATES = {
  NL: {
    cookie: null,
    lastLoginTime: null
  },
  DE: {
    cookie: null,
    lastLoginTime: null
  }
};

// --- –ü–µ—Ä–µ–ø–∏—à–µ–º loginToPanel, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞–ª config ---
async function loginToPanel(config) {
  const serverKey = config === SERVER_CONFIGS.NL ? 'NL' : 'DE';
  const serverState = SERVER_STATES[serverKey];
  
  try {
    console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ 3x-ui (${config.PANEL_URL})...`);
    const res = await axios.post(`${config.PANEL_URL}/login`, {
      username: config.LOGIN_USERNAME,
      password: config.LOGIN_PASSWORD
    }, {
      withCredentials: true
    });

    const setCookie = res.headers['set-cookie'];
    if (setCookie) {
      serverState.cookie = setCookie.map(c => c.split(';')[0]).join('; ');
      serverState.lastLoginTime = Date.now();
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${serverKey}. Cookie —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`);
    } else {
      console.error('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ cookie –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª—å:', err.response?.data || err.message);
    throw err;
  }
}

// --- fetchWithAuth —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç config –∏ –¥–µ–ª–∞–µ—Ç login –ø–æ –Ω—É–∂–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É ---
async function fetchWithAuth(config, serverConfig) {
  const serverKey = serverConfig === SERVER_CONFIGS.NL ? 'NL' : 'DE';
  const serverState = SERVER_STATES[serverKey];
  
  config.headers = config.headers || {};
  config.headers.Cookie = serverState.cookie;

  try {
    const response = await axios(config);
    return response;
  } catch (err) {
    if (err.response && err.response.status === 401) {
      console.warn('‚ö†Ô∏è Cookie –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
      await loginToPanel(serverConfig);
      config.headers.Cookie = SERVER_STATES[serverKey].cookie;
      return axios(config);
    } else {
      throw err;
    }
  }
}

// --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---
app.get('/client/:email', async (req, res) => {
  const email = req.params.email;
  console.log(`üîé –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email: ${email}`);

  // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞
  const serverConfig = getServerConfigBySuffix(email);

  try {
    const respDetail = await fetchWithAuth({
      method: 'GET',
      url: `${serverConfig.PANEL_URL}/panel/api/inbounds/get/${serverConfig.INBOUND_ID}`
    }, serverConfig);

    const fullInbound = respDetail.data.obj;

    let parsedSettings = {};
    try {
      parsedSettings = JSON.parse(fullInbound.settings);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings JSON:', e.message);
    }

    const clients = parsedSettings.clients || [];
    console.log(`üë• –ö–ª–∏–µ–Ω—Ç—ã –≤ inbound ID=${serverConfig.INBOUND_ID}: ${clients.map(c => c.email).join(', ')}`);

    const client = clients.find(c => c.email === email);
    if (client) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç ${email}`);
      return res.json({
        ...client,
        inboundId: fullInbound.id,
        inboundRemark: fullInbound.remark
      });
    }

    console.warn(`‚ùå –ö–ª–∏–µ–Ω—Ç ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    res.status(404).json({ error: 'Client not found' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', err.response?.data || err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: ' + err.message });
  }
});

// --- –ü–æ–ª—É—á–∞–µ–º uuid ---
app.get('/uuid/:email', async (req, res) => {
  const email = req.params.email;
  console.log(`üîé –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email: ${email}`);

  const serverConfig = getServerConfigBySuffix(email);

  try {
    const respDetail = await fetchWithAuth({
      method: 'GET',
      url: `${serverConfig.PANEL_URL}/panel/api/inbounds/get/${serverConfig.INBOUND_ID}`
    }, serverConfig);

    const fullInbound = respDetail.data.obj;

    let parsedSettings = {};
    try {
      parsedSettings = JSON.parse(fullInbound.settings);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings JSON:', e.message);
    }

    const clients = parsedSettings.clients || [];
    const client = clients.find(c => c.email === email);

if (client) {
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç ${email}, UUID: ${client.id}`);

  const suffixMatch = email.match(/-(\d+)$/);
  const suffix = suffixMatch ? suffixMatch[1] : '1';

  let urls = [];

  if (suffix === '1') { // NL
    const URL = generateVlessLink({
      clientId: client.id,
      host: 'vless.rollyk.ru',
      port: 40443,
      pbk: '31SMZTjRqtzab5N2yQa-a0m-RyUHNY8bDkRjKn9okF0',
      comment: `NL-${email}`,
      flow: client.flow,
      sid: '7cec4a13b1c76360' // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π NL
    });
    urls.push(URL);

  } else if (suffix === '5') { // DE
    const URL = generateVlessLink({
      clientId: client.id,
      host: 'de-fkf.rollyk.ru',
      port: 52848,
      pbk: '4MNUP5yofQO_mbHcMAIZFW4RpCBX6BqjAgisuSOGwjw',
      comment: `DE-${email}`,
      flow: client.flow,
      sid: '89af48' // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DE
    });
    urls.push(URL);
  }

  return res.json({ uuid: client.id, urls });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function generateVlessLink({ clientId, host, port, pbk, comment, flow, sid }) {
  const fp = 'chrome';
  const sni = 'dl.google.com';
  const spx = '/';
  const usedFlow = flow || 'xtls-rprx-vision';

  return `vless://${clientId}@${host}:${port}?type=tcp&security=reality&pbk=${pbk}&fp=${fp}&sni=${sni}&sid=${sid}&spx=${encodeURIComponent(spx)}&flow=${usedFlow}#${comment}`;

  console.log('üîó –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞:', URL);

  return res.json({ uuid: client.id, url: URL });
}

    console.warn(`‚ùå –ö–ª–∏–µ–Ω—Ç ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    res.status(404).json({ error: 'Client not found' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', err.response?.data || err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: ' + err.message });
  }
});


/** üîÑ –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ */
async function setClientEnableStatus(email, enable, res) {
  console.log(`üîé –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email: ${email}`);

  const serverConfig = getServerConfigBySuffix(email);

  try {
    const respDetail = await fetchWithAuth({
      method: 'GET',
      url: `${serverConfig.PANEL_URL}/panel/api/inbounds/get/${serverConfig.INBOUND_ID}`
    }, serverConfig);

    const inbound = respDetail.data.obj;
    if (!inbound) {
      return res.status(404).json({ error: 'Inbound not found' });
    }

    let settings;
    try {
      settings = JSON.parse(inbound.settings);
    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ inbound.settings:`, e.message);
      return res.status(500).json({ error: 'Failed to parse inbound settings' });
    }

    const clients = settings.clients || [];
    const client = clients.find(c => c.email === email);

    if (!client) {
      console.warn(`‚ùå –ö–ª–∏–µ–Ω—Ç ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ inbound ID=${inbound.id}`);
      return res.status(404).json({ error: `Client ${email} not found` });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç ${email}, —Ç–µ–∫—É—â–∏–π enable: ${client.enable}`);

    // –º–µ–Ω—è–µ–º enable
    client.enable = enable;

    const body = {
      id: inbound.id,
      settings: JSON.stringify({ clients: [client] })
    };

    console.log(`üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º updateClient –¥–ª—è UUID=${client.id}`);

    const updateResp = await fetchWithAuth({
      method: 'POST',
      url: `${serverConfig.PANEL_URL}/panel/api/inbounds/updateClient/${client.id}`,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      data: body
    }, serverConfig);

    if (updateResp.data.success) {
      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ ${email} –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ`);
      return res.json({ success: true, message: `Client ${email} set to ${enable}` });
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:`, updateResp.data.msg);
      return res.status(500).json({ error: updateResp.data.msg || 'Unknown error' });
    }

  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:`, err.response?.data || err.message);
    return res.status(500).json({ error: err.message });
  }
}

/** üîå –í–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ */
app.put('/client/:email/enable', async (req, res) => {
  await setClientEnableStatus(req.params.email, true, res);
});

/** üîå –û—Ç–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ */
app.put('/client/:email/disable', async (req, res) => {
  await setClientEnableStatus(req.params.email, false, res);
});

/** üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email */
app.delete('/delete/:email', async (req, res) => {
  const email = req.params.email;
  console.log(`üóë –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: ${email}`);

  const serverConfig = getServerConfigBySuffix(email);

  try {
    // –ü–æ–ª—É—á–∞–µ–º inbound –∏ –∏—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    const respDetail = await fetchWithAuth({
      method: 'GET',
      url: `${serverConfig.PANEL_URL}/panel/api/inbounds/get/${serverConfig.INBOUND_ID}`
    }, serverConfig);

    const inbound = respDetail.data.obj;
    if (!inbound) {
      return res.status(404).json({ error: 'Inbound not found' });
    }

    let settings;
    try {
      settings = JSON.parse(inbound.settings);
    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ inbound.settings:`, e.message);
      return res.status(500).json({ error: 'Failed to parse inbound settings' });
    }

    const clients = settings.clients || [];
    const client = clients.find(c => c.email === email);

    if (!client) {
      console.warn(`‚ùå –ö–ª–∏–µ–Ω—Ç ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ inbound ID=${inbound.id}`);
      return res.status(404).json({ error: `Client ${email} not found` });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç ${email}, UUID=${client.id}`);

    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ API –ø–∞–Ω–µ–ª–∏
    const deleteResp = await fetchWithAuth({
      method: 'POST',
      url: `${serverConfig.PANEL_URL}/panel/api/inbounds/${serverConfig.INBOUND_ID}/delClient/${client.id}`,
      headers: {
        'Accept': 'application/json'
      }
    }, serverConfig);

    if (deleteResp.data.success) {
      console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${email} —É–¥–∞–ª—ë–Ω`);
      return res.json({ success: true, message: `Client ${email} deleted` });
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:`, deleteResp.data.msg);
      return res.status(500).json({ error: deleteResp.data.msg || 'Unknown error' });
    }

  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:`, err.response?.data || err.message);
    return res.status(500).json({ error: err.message });
  }
});


/** ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ */
app.post('/add/:email', async (req, res) => {
  const email = req.params.email;
  console.log(`‚ûï –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: ${email}`);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
  const serverConfig = getServerConfigBySuffix(email);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const uuid = uuidv4();

  // –ì–æ—Ç–æ–≤–∏–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
  const client = {
    id: uuid,
    flow: "xtls-rprx-vision",
    email: email,
    limitIp: 0,
    totalGB: 0,
    expiryTime: 0,
    enable: true,
    tgId: "",
    reset: 0
  };

  // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  const body = {
    id: serverConfig.INBOUND_ID,
    settings: JSON.stringify({ clients: [client] })
  };

  try {
    const addResp = await fetchWithAuth({
      method: 'POST',
      url: `${serverConfig.PANEL_URL}/panel/api/inbounds/addClient`,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      data: body
    }, serverConfig);

    if (addResp.data.success) {
      console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç ${email} –¥–æ–±–∞–≤–ª–µ–Ω (UUID=${uuid})`);
      return res.json({
        success: true,
        uuid,
        email,
        message: `Client ${email} added`
      });
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:`, addResp.data.msg);
      return res.status(500).json({ error: addResp.data.msg || 'Unknown error' });
    }
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:`, err.response?.data || err.message);
    return res.status(500).json({ error: err.message });
  }
});

//–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, async () => {
    console.log(`üöÄ –ü—Ä–æ–∫—Å–∏-API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    try {
        await loginToPanel(SERVER_CONFIGS.NL);
        await loginToPanel(SERVER_CONFIGS.DE);
    } catch (e) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', e.message);
    }
});
