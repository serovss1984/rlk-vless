const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const jwt = require('jsonwebtoken');
const jwkToPem = require('jwk-to-pem');
const db = require('./config/db');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ Telegram
const TELEGRAM_BOT_API = process.env.TELEGRAM_BOT_API;

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
const sendTelegramNotification = (chatId, message) => {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_API}/sendMessage`;

  axios.post(url, {
    chat_id: chatId,
    text: message,
  })
};

const app = express();
app.use(bodyParser.text({ type: '*/*' }));

let publicKeyPem;

async function loadPublicKey() {
  try {
    const res = await axios.get('https://enter.tochka.com/doc/openapi/static/keys/public');
    publicKeyPem = jwkToPem(res.data);
    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PEM');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞
function readJsonFileSafe(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      return [];
    }
    
    const content = fs.readFileSync(filePath, 'utf8').trim();
    if (!content) {
      return [];
    }
    
    return JSON.parse(content);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ JSON —Ñ–∞–π–ª
function writeJsonFileSafe(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ JSON —Ñ–∞–π–ª:', error.message);
  }
}

async function getUserByChatId(chatId) {
    const query = 'SELECT * FROM users WHERE chatId = ?';
    return new Promise((resolve, reject) => {
        db.query(query, [chatId], (err, results) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                reject(err);
            } else if (results.length > 0) {
                resolve(results[0]);
            } else {
                reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }
        });
    });
}

async function updateBalance(chatId, paymentAmount, paymentDate) {
    try {
        const user = await getUserByChatId(chatId);
        const newBalance = parseFloat(user.balance) + parseFloat(paymentAmount);

        const query = `
            UPDATE users 
            SET balance = ?, lastPaymentDate = ?, paymentAmount = ?, adminWhoBill = ?
            WHERE chatId = ?`;

        return new Promise((resolve, reject) => {
            db.query(query, [newBalance, paymentDate, paymentAmount, 'Tochka', chatId], (err) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', err);
                    reject(err);
                } else {
                    const message = `–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤–∞—è —Å—É–º–º–∞: ${newBalance.toFixed(2)}. –°—É–º–º–∞ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${parseFloat(paymentAmount).toFixed(2)}. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!`;
                    sendTelegramNotification(chatId, message);
                    sendTelegramNotification(5906119921, message);
                    console.log(message);
                    resolve(newBalance);
                }
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ updateBalance:', error.message);
        throw error;
    }
}

function formatDateForMySQL(isoString) {
    const date = new Date(isoString);
    const yyyy = date.getUTCFullYear();
    const mm = String(date.getUTCMonth() + 1).padStart(2, '0');
    const dd = String(date.getUTCDate()).padStart(2, '0');
    const hh = String(date.getUTCHours()).padStart(2, '0');
    const min = String(date.getUTCMinutes()).padStart(2, '0');
    const ss = String(date.getUTCSeconds()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd} ${hh}:${min}:${ss}`;
}

// GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/payok/', (req, res) => {
    res.send('–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç');
});

app.post('/payok', async (req, res) => {
  const token = req.body;

  try {
    const decoded = jwt.verify(token, publicKeyPem, { algorithms: ['RS256'] });
//    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(decoded, null, 2));

    if (decoded.webhookType === 'incomingSbpPayment') {
      const logFile = path.join(__dirname, 'incoming_sbp.json');

      const entry = {
        timestamp: new Date().toISOString(),
        amount: decoded.amount,
        purpose: decoded.purpose,
        operationId: decoded.operationId,
        payerName: decoded.payerName,
        payerMobileNumber: decoded.payerMobileNumber
      };

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å JSON
      const logs = readJsonFileSafe(logFile);
      logs.push(entry);
      writeJsonFileSafe(logFile, logs);

      console.log('üíæ incomingSbpPayment —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', entry);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ decoded
      const chatId = decoded.purpose; // chatId –≤ –ø–æ–ª–µ purpose
      const paymentAmount = decoded.amount;
      const paymentDate = formatDateForMySQL(new Date().toISOString());

      await updateBalance(chatId, paymentAmount, paymentDate);
    }

    res.sendStatus(200);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
    res.sendStatus(400);
  }
});

// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
const logFile = path.join(__dirname, 'incoming_sbp.json');
if (!fs.existsSync(logFile)) {
  writeJsonFileSafe(logFile, []);
}

loadPublicKey().then(() => {
  app.listen(3300, () => console.log('Webhook —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 3300'));
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
});