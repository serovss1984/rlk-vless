const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');
const jwt = require('jsonwebtoken');
const jwkToPem = require('jwk-to-pem');
const db = require('./config/db');
const fs = require('fs');
const path = require('path');
const cron = require('node-cron');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ Telegram
const TELEGRAM_BOT_API = process.env.TELEGRAM_BOT_API;

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
const sendTelegramNotification = (chatId, message) => {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_API}/sendMessage`;

  axios.post(url, {
    chat_id: chatId,
    text: message,
  })
};

let adminChatIds = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const loadAdminChatIds = () => {
  db.query('SELECT chatId FROM users WHERE admin = 1', (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', err);
      return;
    }

    adminChatIds = results.map(row => row.chatId.toString());
    console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${adminChatIds.join(', ')}`);
  });
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadAdminChatIds();

const app = express();
app.use(bodyParser.text({ type: '*/*' }));

let publicKeyPem;

async function loadPublicKey() {
  try {
    const res = await axios.get('https://enter.tochka.com/doc/openapi/static/keys/public');
    publicKeyPem = jwkToPem(res.data);
    console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PEM');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞
function readJsonFileSafe(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      return [];
    }
    
    const content = fs.readFileSync(filePath, 'utf8').trim();
    if (!content) {
      return [];
    }
    
    return JSON.parse(content);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞:', error.message);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ JSON —Ñ–∞–π–ª
function writeJsonFileSafe(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ JSON —Ñ–∞–π–ª:', error.message);
  }
}

async function getUserByChatId(chatId) {
    const query = 'SELECT * FROM users WHERE chatId = ?';
    return new Promise((resolve, reject) => {
        db.query(query, [chatId], (err, results) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                reject(err);
            } else if (results.length > 0) {
                resolve(results[0]);
            } else {
                reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏
async function updateBalance(chatId, paymentAmount, paymentDate, operationId) {
  console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${chatId}`);
  
  try {
    const user = await getUserByChatId(chatId);
    const currentBalance = parseFloat(user.balance) || 0;
    const paymentValue = parseFloat(paymentAmount);
    const newBalance = currentBalance + paymentValue;

    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${currentBalance} + ${paymentValue} = ${newBalance}`);
    console.log(`üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, {
      chatId: user.chatId,
      invited_by: user.invited_by,
      name: user.name
    });

    // --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä ---
    let refBonus = 0;
    let referrerId = null;
    let referrerName = '';
    let percent = 0;

    if (user.invited_by && user.invited_by !== '0' && user.invited_by !== null) {
      referrerId = user.invited_by;
      console.log(`üë• –ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä: ${referrerId}`);

      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã plans (–ø–æ plan_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        const planId = user.plan_id || 2; // fallback = 2 –µ—Å–ª–∏ –Ω–µ—Ç plan_id
        const planQuery = 'SELECT precent FROM plans WHERE id = ?';

        const planResults = await new Promise((resolve, reject) => {
          db.query(planQuery, [planId], (err, results) => {
            if (err) return reject(err);
            resolve(results);
          });
        });

        if (planResults.length > 0) {
          percent = parseFloat(planResults[0].precent) || 0;
          refBonus = (paymentValue * percent) / 100;
          console.log(`üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${percent}% –æ—Ç ${paymentValue} = ${refBonus.toFixed(2)} —Ä—É–±.`);
        } else {
          console.log(`‚ö†Ô∏è –ü–ª–∞–Ω —Å id=${planId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è`);
        }

        const referrer = await getUserByChatId(referrerId);
        referrerName = referrer.name || `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referrerId}`;
      } catch (refError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', refError);
      }
    } else {
      console.log('‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è');
    }

    // --- –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å ---
    const updateQuery = `
        UPDATE users 
        SET balance = ?, lastPaymentDate = ?, paymentAmount = ?, adminWhoBill = ?
        WHERE chatId = ?`;

    await new Promise((resolve, reject) => {
      db.query(updateQuery, [newBalance, paymentDate, paymentAmount, 'Yoomoney', chatId], (err) => {
        if (err) return reject(err);
        resolve();
      });
    });

    console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î`);

    // --- –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    const userMessage = `üí∞ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\nüí≥ –°—É–º–º–∞: ${paymentValue.toFixed(2)} —Ä—É–±.\nüíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} —Ä—É–±.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üòä`;
    await sendTelegramNotification(chatId, userMessage);

    // --- –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å, –µ—Å–ª–∏ –µ—Å—Ç—å ---
    if (refBonus > 0 && referrerId) {
      console.log(`üí∞ –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ${refBonus.toFixed(2)} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${referrerId}`);

      await new Promise((resolve, reject) => {
        db.query(
          'UPDATE users SET ref_balance = ref_balance + ? WHERE chatId = ?',
          [refBonus, referrerId],
          (err) => (err ? reject(err) : resolve())
        );
      });

      const refMessage = 
        `üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å!\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name || `ID ${chatId}`}\n` +
        `üí≥ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${paymentValue.toFixed(2)} —Ä—É–±.\n` +
        `üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${percent}%\n` +
        `üí∏ –í–∞—à –±–æ–Ω—É—Å: ${refBonus.toFixed(2)} —Ä—É–±.\n\n` +
        `üí° –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "üí≥ –û–ø–ª–∞—Ç–∞"`;

      await sendTelegramNotification(referrerId, refMessage);
      console.log(`‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –±–æ–Ω—É—Å–µ`);
    }

    // --- –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ---
    let adminMessage = 
      `üì¢ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name || chatId}\n` +
      `üí≥ –°—É–º–º–∞: ${paymentValue.toFixed(2)} —Ä—É–±.\n` +
      `üíé –ë–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} —Ä—É–±.\n` +
      `üÜî –û–ø–µ—Ä–∞—Ü–∏—è: ${operationId}`;

    if (refBonus > 0) {
      adminMessage += `\nüéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: ${refBonus.toFixed(2)} —Ä—É–±. ‚Üí ${referrerName} (${referrerId})`;
    } else {
      adminMessage += `\n‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω`;
    }

    console.log(`üì§ –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (${adminChatIds.join(', ')})...`);
    const adminPromises = adminChatIds.map(adminId => 
      sendTelegramNotification(adminId, adminMessage)
    );
    await Promise.allSettled(adminPromises);
    console.log(`‚úÖ –í—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã`);

    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è ${chatId}: ${newBalance.toFixed(2)} ‚ÇΩ`);
    return newBalance;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateBalance:', error);
    throw error;
  }
}

function formatDateForMySQL(isoString) {
    const date = new Date(isoString);
    const yyyy = date.getUTCFullYear();
    const mm = String(date.getUTCMonth() + 1).padStart(2, '0');
    const dd = String(date.getUTCDate()).padStart(2, '0');
    const hh = String(date.getUTCHours()).padStart(2, '0');
    const min = String(date.getUTCMinutes()).padStart(2, '0');
    const ss = String(date.getUTCSeconds()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd} ${hh}:${min}:${ss}`;
}

// GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/payok/', (req, res) => {
    res.send('–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç');
});

app.post('/payok', async (req, res) => {
  const token = req.body;

  try {
    const decoded = jwt.verify(token, publicKeyPem, { algorithms: ['RS256'] });
//    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(decoded, null, 2));

    if (decoded.webhookType === 'incomingSbpPayment') {
      const logFile = path.join(__dirname, 'incoming_sbp.json');

      const entry = {
        timestamp: new Date().toISOString(),
        amount: decoded.amount,
        purpose: decoded.purpose,
        operationId: decoded.operationId,
        payerName: decoded.payerName,
        payerMobileNumber: decoded.payerMobileNumber
      };

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å JSON
      const logs = readJsonFileSafe(logFile);
      logs.push(entry);
      writeJsonFileSafe(logFile, logs);

      console.log('üíæ incomingSbpPayment —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', entry);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ decoded
      const chatId = decoded.purpose; // chatId –≤ –ø–æ–ª–µ purpose
      const paymentAmount = decoded.amount;
      const paymentDate = formatDateForMySQL(new Date().toISOString());

      await updateBalance(chatId, paymentAmount, paymentDate);
    }

    res.sendStatus(200);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
    res.sendStatus(400);
  }
});

// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
const logFile = path.join(__dirname, 'incoming_sbp.json');
if (!fs.existsSync(logFile)) {
  writeJsonFileSafe(logFile, []);
}

loadPublicKey().then(() => {
  app.listen(3300, () => console.log('Webhook —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 3300'));
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule('*/5 * * * *', loadAdminChatIds);