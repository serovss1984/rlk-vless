require('dotenv').config();
const express = require('express');
const fs = require('fs');
const db = require('./config/db');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const axios = require('axios')
const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ Telegram
const TELEGRAM_BOT_API = process.env.TELEGRAM_BOT_API;

let adminChatIds = [];

// –ó–∞–≥—Ä—É–∑–∫–∞ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const loadAdminChatIds = () => {
  db.query('SELECT chatId FROM users WHERE admin = 1', (err, results) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', err);
      return;
    }

    adminChatIds = results.map(row => row.chatId.toString());
    console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${adminChatIds.join(', ')}`);
  });
};

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadAdminChatIds();

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram (–ò–°–ü–†–ê–í–õ–ï–ù–ê)
const sendTelegramNotification = async (chatId, message) => {
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${chatId}`);
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_API}/sendMessage`;

  try {
    const response = await axios.post(url, {
      chat_id: chatId,
      text: message,
    });
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${chatId}`);
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${chatId}:`, error.response?.data || error.message);
    throw error;
  }
};

const app = express();
app.use(bodyParser.json());

app.use(express.urlencoded({ extended: false }));
app.use(express.json());

// GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/pay/', (req, res) => {
    res.send('–ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chatId
async function getUserByChatId(chatId) {
    const query = 'SELECT * FROM users WHERE chatId = ?';
    return new Promise((resolve, reject) => {
        db.query(query, [chatId], (err, results) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                reject(err);
            } else if (results.length > 0) {
                resolve(results[0]);
            } else {
                reject(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è–º–∏
async function updateBalance(chatId, paymentAmount, paymentDate, operationId) {
  console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${chatId}`);
  
  try {
    const user = await getUserByChatId(chatId);
    const currentBalance = parseFloat(user.balance);
    const paymentValue = parseFloat(paymentAmount);
    const newBalance = currentBalance + paymentValue;
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${currentBalance} + ${paymentValue} = ${newBalance}`);
    console.log(`üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, {
      chatId: user.chatId,
      invited_by: user.invited_by,
      name: user.name
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ –ø–ª–∞–Ω–∞
    let refBonus = 0;
    let referrerId = null;
    let referrerName = '';
    let percent = 0;

    if (user.invited_by && user.invited_by !== '0' && user.invited_by !== null) {
      referrerId = user.invited_by;
      console.log(`üë• –ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä: ${referrerId}`);

      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ –ø–ª–∞–Ω–∞ —Å id=2
        const planQuery = 'SELECT precent FROM plans WHERE id = 2';
        console.log(`üìä –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: ${planQuery}`);
        
        const planResults = await new Promise((resolve, reject) => {
          db.query(planQuery, (err, results) => {
            if (err) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø–ª–∞–Ω–∞–º:', err);
              reject(err);
            } else {
              console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞–Ω–æ–≤:`, results);
              resolve(results);
            }
          });
        });

        if (planResults.length > 0) {
          percent = parseFloat(planResults[0].precent) || 0;
          refBonus = (paymentValue * percent) / 100;
          console.log(`üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${percent}% –æ—Ç ${paymentValue} = ${refBonus.toFixed(2)} —Ä—É–±.`);
        } else {
          console.log('‚ö†Ô∏è –ü–ª–∞–Ω —Å id=2 –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω');
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        console.log(`üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: ${referrerId}`);
        const referrer = await getUserByChatId(referrerId);
        referrerName = referrer.name || `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${referrerId}`;
        console.log(`üë§ –†–µ—Ñ–µ—Ä–µ—Ä –Ω–∞–π–¥–µ–Ω: ${referrerName}`);
        
      } catch (refError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', refError);
      }
    } else {
      console.log('‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è');
    }

    const query = `
        UPDATE users 
        SET balance = ?, lastPaymentDate = ?, paymentAmount = ?, adminWhoBill = ?
        WHERE chatId = ?`;

    return new Promise((resolve, reject) => {
      db.query(query, [newBalance, paymentDate, paymentAmount, 'Yoomoney', chatId], async (err, results) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', err);
          reject(err);
          return;
        }

        console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î`);
        
        try {
          // ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
          const userMessage = `üí∞ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\nüí≥ –°—É–º–º–∞: ${paymentValue.toFixed(2)} —Ä—É–±.\nüíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} —Ä—É–±.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! üòä`;
          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
          await sendTelegramNotification(chatId, userMessage);
          console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω`);

// ‚úÖ –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä
if (refBonus > 0 && referrerId) {
  try {
    console.log(`üí∞ –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ${refBonus.toFixed(2)} —Ä—É–±. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${referrerId}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π ref_balance —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const getRefBalanceQuery = 'SELECT ref_balance, name FROM users WHERE chatId = ?';
    db.query(getRefBalanceQuery, [referrerId], async (refBalanceErr, refBalanceResults) => {
      if (refBalanceErr || refBalanceResults.length === 0) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ref_balance —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:', refBalanceErr);
        return;
      }

      const currentRefBalance = parseFloat(refBalanceResults[0].ref_balance) || 0;
      console.log(`üìä –¢–µ–∫—É—â–∏–π ref_balance —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: ${currentRefBalance}`);

      // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ó–ê–ü–†–û–° - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –±–∞–ª–∞–Ω—Å—É
      const updateRefBalanceQuery = `
        UPDATE users 
        SET ref_balance = ref_balance + ? 
        WHERE chatId = ?`;
    
      db.query(updateRefBalanceQuery, [refBonus, referrerId], (refErr, refUpdateResults) => {
        if (refErr) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', refErr);
        } else {
          console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ ${refBonus.toFixed(2)} —Ä—É–±.`);
          
          // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
          db.query(getRefBalanceQuery, [referrerId], (checkErr, checkResults) => {
            if (!checkErr && checkResults.length > 0) {
              const updatedRefBalance = parseFloat(checkResults[0].ref_balance) || 0;
              console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: ref_balance –±—ã–ª ${currentRefBalance}, —Å—Ç–∞–ª ${updatedRefBalance}`);
              
              if (updatedRefBalance !== currentRefBalance + refBonus) {
                console.error(`‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–æ—Å—å ${currentRefBalance + refBonus}, –ø–æ–ª—É—á–µ–Ω–æ ${updatedRefBalance}`);
              }
            }
          });
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏
          const refMessage = 
            `üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω –±–∞–ª–∞–Ω—Å!\n\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name || `ID ${chatId}`}\n` +
            `üí≥ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ${paymentValue.toFixed(2)} —Ä—É–±.\n` +
            `üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${percent}%\n` +
            `üí∏ –í–∞—à –±–æ–Ω—É—Å: ${refBonus.toFixed(2)} —Ä—É–±.\n` +
            `üí∞ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${(currentRefBalance + refBonus).toFixed(2)} —Ä—É–±.\n\n` +
            `üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ "üí≥ –û–ø–ª–∞—Ç–∞"`;
          
          sendTelegramNotification(referrerId, refMessage)
            .then(() => console.log(`‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –±–æ–Ω—É—Å–µ`))
            .catch(err => console.error(`‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:`, err));
        }
      });
    });
    
  } catch (bonusError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞:', bonusError);
  }
} else {
  console.log(`‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω: refBonus=${refBonus}, referrerId=${referrerId}`);
}

          // ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
          let adminMessage = 
            `üì¢ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n` +
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}\n` +
            `üí≥ –°—É–º–º–∞: ${paymentValue.toFixed(2)} —Ä—É–±.\n` +
            `üíé –ë–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} —Ä—É–±.`;

          if (refBonus > 0) {
            adminMessage += `\nüéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: ${refBonus.toFixed(2)} —Ä—É–±. (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${referrerId})`;
          } else {
            adminMessage += `\n‚ÑπÔ∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω`;
          }

          console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: ${adminChatIds.join(', ')}`);
          
          const adminPromises = adminChatIds.map(async (adminId) => {
            try {
              await sendTelegramNotification(adminId, adminMessage);
              console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminId} —É–≤–µ–¥–æ–º–ª–µ–Ω`);
              return { success: true, adminId };
            } catch (error) {
              console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${adminId}:`, error.message);
              return { success: false, adminId, error: error.message };
            }
          });

          await Promise.allSettled(adminPromises);
          console.log(`‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã`);

          console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${chatId}: ${newBalance}`);
          resolve(newBalance);
          
        } catch (notificationError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationError.message);
          // –í—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω–æ, —Ç.–∫. –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω
          resolve(newBalance);
        }
      });
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ updateBalance:', error);
    throw error;
  }
}

function formatDateForMySQL(isoString) {
    const date = new Date(isoString);
    const yyyy = date.getUTCFullYear();
    const mm = String(date.getUTCMonth() + 1).padStart(2, '0');
    const dd = String(date.getUTCDate()).padStart(2, '0');
    const hh = String(date.getUTCHours()).padStart(2, '0');
    const min = String(date.getUTCMinutes()).padStart(2, '0');
    const ss = String(date.getUTCSeconds()).padStart(2, '0');
    return `${yyyy}-${mm}-${dd} ${hh}:${min}:${ss}`;
}

app.set('trust proxy', true);

// POST –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
app.post('/pay/', async (req, res) => {
    const data = req.body;

    console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ:', data);

const ip =
  req.headers['x-forwarded-for']?.split(',')[0].trim() ||
  req.headers['x-real-ip'] ||
  req.ip ||
  req.connection.remoteAddress;

const sql = `
    INSERT INTO yoomoney (
        notification_type, bill_id, amount, codepro, withdraw_amount, unaccepted,
        label, datetime, sender, sha1_hash, operation_label, operation_id, currency, ip
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`;

const values = [
    data.notification_type || null,
    data.bill_id || null,
    data.amount || null,
    data.codepro || null,
    data.withdraw_amount || null,
    data.unaccepted || null,
    data.label || null,
    data.datetime || null,
    data.sender || null,
    data.sha1_hash || null,
    data.operation_label || null,
    data.operation_id || null,
    data.currency || null,
    ip
];

db.query(sql, values, (err) => {
    if (err) console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É yoomoney:', err);
    else console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ YooMoney –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ë–î');
});

    try {
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        const logMessage = `${new Date().toISOString()} - –ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂: ${JSON.stringify(data)}\n`;

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (data.operation_id === 'test-notification') {
            console.log('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            const testMessage = '‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç YooMoney';
            const adminPromises = adminChatIds.map(adminId => 
                sendTelegramNotification(adminId, testMessage)
            );
            await Promise.allSettled(adminPromises);
            
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK');
            return res.status(200).send('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        if (!data.label || !data.amount || !data.operation_id) {
            const errorMsg = `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: label=${data.label}, amount=${data.amount}, operation_id=${data.operation_id}`;
            console.error(errorMsg);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            const adminPromises = adminChatIds.map(adminId => 
                sendTelegramNotification(adminId, errorMsg)
            );
            await Promise.allSettled(adminPromises);
            
            console.log('‚ùå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 400 –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
            return res.status(400).send('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö');
        }

        const chatId = data.label.toString();
        const paymentAmount = data.withdraw_amount || data.amount;
        const operationId = data.operation_id;
        const paymentDate = formatDateForMySQL(data.datetime || new Date().toISOString());

        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: chatId=${chatId}, amount=${paymentAmount}, operationId=${operationId}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            await getUserByChatId(chatId);
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–∞–π–¥–µ–Ω`);
        } catch (error) {
            const errorMsg = `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId=${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`;
            console.error(errorMsg);
            
            const adminPromises = adminChatIds.map(adminId => 
                sendTelegramNotification(adminId, errorMsg)
            );
            await Promise.allSettled(adminPromises);
            
            console.log('‚ùå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 404 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).send('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await updateBalance(chatId, paymentAmount, paymentDate, operationId);

        console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${operationId}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 200 OK`);
        res.status(200).send('OK');

    } catch (err) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', err);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        const errorMsg = `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: ${err.message}`;
        const adminPromises = adminChatIds.map(adminId => 
            sendTelegramNotification(adminId, errorMsg)
        );
        await Promise.allSettled(adminPromises);
        
        console.log('‚ùå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 500 - –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const port = 3002;
app.listen(port, () => {
    console.log(`üöÄ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log(`üìù –õ–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ payment_notifications.log`);
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule('*/5 * * * *', loadAdminChatIds);